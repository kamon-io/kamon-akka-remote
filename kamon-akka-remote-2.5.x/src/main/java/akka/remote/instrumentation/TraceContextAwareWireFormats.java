// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TraceContextAwareWireFormats.proto

package akka.remote;

public final class TraceContextAwareWireFormats {
  private TraceContextAwareWireFormats() {}
  public static void registerAllExtensions(
      akka.protobuf.ExtensionRegistry registry) {
  }
  public interface AckAndTraceContextAwareEnvelopeContainerOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // optional .AcknowledgementInfo ack = 1;
    /**
     * <code>optional .AcknowledgementInfo ack = 1;</code>
     */
    boolean hasAck();
    /**
     * <code>optional .AcknowledgementInfo ack = 1;</code>
     */
    akka.remote.WireFormats.AcknowledgementInfo getAck();
    /**
     * <code>optional .AcknowledgementInfo ack = 1;</code>
     */
    akka.remote.WireFormats.AcknowledgementInfoOrBuilder getAckOrBuilder();

    // optional .TraceContextAwareRemoteEnvelope envelope = 2;
    /**
     * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
     */
    boolean hasEnvelope();
    /**
     * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
     */
    akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope getEnvelope();
    /**
     * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
     */
    akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelopeOrBuilder getEnvelopeOrBuilder();
  }
  /**
   * Protobuf type {@code AckAndTraceContextAwareEnvelopeContainer}
   */
  public static final class AckAndTraceContextAwareEnvelopeContainer extends
      akka.protobuf.GeneratedMessage
      implements AckAndTraceContextAwareEnvelopeContainerOrBuilder {
    // Use AckAndTraceContextAwareEnvelopeContainer.newBuilder() to construct.
    private AckAndTraceContextAwareEnvelopeContainer(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AckAndTraceContextAwareEnvelopeContainer(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AckAndTraceContextAwareEnvelopeContainer defaultInstance;
    public static AckAndTraceContextAwareEnvelopeContainer getDefaultInstance() {
      return defaultInstance;
    }

    public AckAndTraceContextAwareEnvelopeContainer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AckAndTraceContextAwareEnvelopeContainer(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              akka.remote.WireFormats.AcknowledgementInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = ack_.toBuilder();
              }
              ack_ = input.readMessage(akka.remote.WireFormats.AcknowledgementInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ack_);
                ack_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = envelope_.toBuilder();
              }
              envelope_ = input.readMessage(akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(envelope_);
                envelope_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.remote.TraceContextAwareWireFormats.internal_static_AckAndTraceContextAwareEnvelopeContainer_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.remote.TraceContextAwareWireFormats.internal_static_AckAndTraceContextAwareEnvelopeContainer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer.class, akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer.Builder.class);
    }

    public static akka.protobuf.Parser<AckAndTraceContextAwareEnvelopeContainer> PARSER =
        new akka.protobuf.AbstractParser<AckAndTraceContextAwareEnvelopeContainer>() {
      public AckAndTraceContextAwareEnvelopeContainer parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new AckAndTraceContextAwareEnvelopeContainer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<AckAndTraceContextAwareEnvelopeContainer> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .AcknowledgementInfo ack = 1;
    public static final int ACK_FIELD_NUMBER = 1;
    private akka.remote.WireFormats.AcknowledgementInfo ack_;
    /**
     * <code>optional .AcknowledgementInfo ack = 1;</code>
     */
    public boolean hasAck() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .AcknowledgementInfo ack = 1;</code>
     */
    public akka.remote.WireFormats.AcknowledgementInfo getAck() {
      return ack_;
    }
    /**
     * <code>optional .AcknowledgementInfo ack = 1;</code>
     */
    public akka.remote.WireFormats.AcknowledgementInfoOrBuilder getAckOrBuilder() {
      return ack_;
    }

    // optional .TraceContextAwareRemoteEnvelope envelope = 2;
    public static final int ENVELOPE_FIELD_NUMBER = 2;
    private akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope envelope_;
    /**
     * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
     */
    public boolean hasEnvelope() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
     */
    public akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope getEnvelope() {
      return envelope_;
    }
    /**
     * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
     */
    public akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelopeOrBuilder getEnvelopeOrBuilder() {
      return envelope_;
    }

    private void initFields() {
      ack_ = akka.remote.WireFormats.AcknowledgementInfo.getDefaultInstance();
      envelope_ = akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasAck()) {
        if (!getAck().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasEnvelope()) {
        if (!getEnvelope().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, ack_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, envelope_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(1, ack_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(2, envelope_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AckAndTraceContextAwareEnvelopeContainer}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainerOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_AckAndTraceContextAwareEnvelopeContainer_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_AckAndTraceContextAwareEnvelopeContainer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer.class, akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer.Builder.class);
      }

      // Construct using akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAckFieldBuilder();
          getEnvelopeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (ackBuilder_ == null) {
          ack_ = akka.remote.WireFormats.AcknowledgementInfo.getDefaultInstance();
        } else {
          ackBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (envelopeBuilder_ == null) {
          envelope_ = akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.getDefaultInstance();
        } else {
          envelopeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_AckAndTraceContextAwareEnvelopeContainer_descriptor;
      }

      public akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer getDefaultInstanceForType() {
        return akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer.getDefaultInstance();
      }

      public akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer build() {
        akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer buildPartial() {
        akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer result = new akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (ackBuilder_ == null) {
          result.ack_ = ack_;
        } else {
          result.ack_ = ackBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (envelopeBuilder_ == null) {
          result.envelope_ = envelope_;
        } else {
          result.envelope_ = envelopeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer) {
          return mergeFrom((akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer other) {
        if (other == akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer.getDefaultInstance()) return this;
        if (other.hasAck()) {
          mergeAck(other.getAck());
        }
        if (other.hasEnvelope()) {
          mergeEnvelope(other.getEnvelope());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasAck()) {
          if (!getAck().isInitialized()) {
            
            return false;
          }
        }
        if (hasEnvelope()) {
          if (!getEnvelope().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.remote.TraceContextAwareWireFormats.AckAndTraceContextAwareEnvelopeContainer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .AcknowledgementInfo ack = 1;
      private akka.remote.WireFormats.AcknowledgementInfo ack_ = akka.remote.WireFormats.AcknowledgementInfo.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.WireFormats.AcknowledgementInfo, akka.remote.WireFormats.AcknowledgementInfo.Builder, akka.remote.WireFormats.AcknowledgementInfoOrBuilder> ackBuilder_;
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      public boolean hasAck() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      public akka.remote.WireFormats.AcknowledgementInfo getAck() {
        if (ackBuilder_ == null) {
          return ack_;
        } else {
          return ackBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      public Builder setAck(akka.remote.WireFormats.AcknowledgementInfo value) {
        if (ackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ack_ = value;
          onChanged();
        } else {
          ackBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      public Builder setAck(
          akka.remote.WireFormats.AcknowledgementInfo.Builder builderForValue) {
        if (ackBuilder_ == null) {
          ack_ = builderForValue.build();
          onChanged();
        } else {
          ackBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      public Builder mergeAck(akka.remote.WireFormats.AcknowledgementInfo value) {
        if (ackBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              ack_ != akka.remote.WireFormats.AcknowledgementInfo.getDefaultInstance()) {
            ack_ =
              akka.remote.WireFormats.AcknowledgementInfo.newBuilder(ack_).mergeFrom(value).buildPartial();
          } else {
            ack_ = value;
          }
          onChanged();
        } else {
          ackBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      public Builder clearAck() {
        if (ackBuilder_ == null) {
          ack_ = akka.remote.WireFormats.AcknowledgementInfo.getDefaultInstance();
          onChanged();
        } else {
          ackBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      public akka.remote.WireFormats.AcknowledgementInfo.Builder getAckBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getAckFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      public akka.remote.WireFormats.AcknowledgementInfoOrBuilder getAckOrBuilder() {
        if (ackBuilder_ != null) {
          return ackBuilder_.getMessageOrBuilder();
        } else {
          return ack_;
        }
      }
      /**
       * <code>optional .AcknowledgementInfo ack = 1;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.WireFormats.AcknowledgementInfo, akka.remote.WireFormats.AcknowledgementInfo.Builder, akka.remote.WireFormats.AcknowledgementInfoOrBuilder> 
          getAckFieldBuilder() {
        if (ackBuilder_ == null) {
          ackBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.remote.WireFormats.AcknowledgementInfo, akka.remote.WireFormats.AcknowledgementInfo.Builder, akka.remote.WireFormats.AcknowledgementInfoOrBuilder>(
                  ack_,
                  getParentForChildren(),
                  isClean());
          ack_ = null;
        }
        return ackBuilder_;
      }

      // optional .TraceContextAwareRemoteEnvelope envelope = 2;
      private akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope envelope_ = akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope, akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.Builder, akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelopeOrBuilder> envelopeBuilder_;
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      public boolean hasEnvelope() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      public akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope getEnvelope() {
        if (envelopeBuilder_ == null) {
          return envelope_;
        } else {
          return envelopeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      public Builder setEnvelope(akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope value) {
        if (envelopeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          envelope_ = value;
          onChanged();
        } else {
          envelopeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      public Builder setEnvelope(
          akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.Builder builderForValue) {
        if (envelopeBuilder_ == null) {
          envelope_ = builderForValue.build();
          onChanged();
        } else {
          envelopeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      public Builder mergeEnvelope(akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope value) {
        if (envelopeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              envelope_ != akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.getDefaultInstance()) {
            envelope_ =
              akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.newBuilder(envelope_).mergeFrom(value).buildPartial();
          } else {
            envelope_ = value;
          }
          onChanged();
        } else {
          envelopeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      public Builder clearEnvelope() {
        if (envelopeBuilder_ == null) {
          envelope_ = akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.getDefaultInstance();
          onChanged();
        } else {
          envelopeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      public akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.Builder getEnvelopeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getEnvelopeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      public akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelopeOrBuilder getEnvelopeOrBuilder() {
        if (envelopeBuilder_ != null) {
          return envelopeBuilder_.getMessageOrBuilder();
        } else {
          return envelope_;
        }
      }
      /**
       * <code>optional .TraceContextAwareRemoteEnvelope envelope = 2;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope, akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.Builder, akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelopeOrBuilder> 
          getEnvelopeFieldBuilder() {
        if (envelopeBuilder_ == null) {
          envelopeBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope, akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.Builder, akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelopeOrBuilder>(
                  envelope_,
                  getParentForChildren(),
                  isClean());
          envelope_ = null;
        }
        return envelopeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AckAndTraceContextAwareEnvelopeContainer)
    }

    static {
      defaultInstance = new AckAndTraceContextAwareEnvelopeContainer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AckAndTraceContextAwareEnvelopeContainer)
  }

  public interface TraceContextAwareRemoteEnvelopeOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required .ActorRefData recipient = 1;
    /**
     * <code>required .ActorRefData recipient = 1;</code>
     */
    boolean hasRecipient();
    /**
     * <code>required .ActorRefData recipient = 1;</code>
     */
    akka.remote.WireFormats.ActorRefData getRecipient();
    /**
     * <code>required .ActorRefData recipient = 1;</code>
     */
    akka.remote.WireFormats.ActorRefDataOrBuilder getRecipientOrBuilder();

    // required .SerializedMessage message = 2;
    /**
     * <code>required .SerializedMessage message = 2;</code>
     */
    boolean hasMessage();
    /**
     * <code>required .SerializedMessage message = 2;</code>
     */
    akka.remote.WireFormats.SerializedMessage getMessage();
    /**
     * <code>required .SerializedMessage message = 2;</code>
     */
    akka.remote.WireFormats.SerializedMessageOrBuilder getMessageOrBuilder();

    // optional .ActorRefData sender = 4;
    /**
     * <code>optional .ActorRefData sender = 4;</code>
     */
    boolean hasSender();
    /**
     * <code>optional .ActorRefData sender = 4;</code>
     */
    akka.remote.WireFormats.ActorRefData getSender();
    /**
     * <code>optional .ActorRefData sender = 4;</code>
     */
    akka.remote.WireFormats.ActorRefDataOrBuilder getSenderOrBuilder();

    // optional fixed64 seq = 5;
    /**
     * <code>optional fixed64 seq = 5;</code>
     */
    boolean hasSeq();
    /**
     * <code>optional fixed64 seq = 5;</code>
     */
    long getSeq();

    // optional .RemoteTraceContext traceContext = 15;
    /**
     * <code>optional .RemoteTraceContext traceContext = 15;</code>
     */
    boolean hasTraceContext();
    /**
     * <code>optional .RemoteTraceContext traceContext = 15;</code>
     */
    akka.remote.TraceContextAwareWireFormats.RemoteTraceContext getTraceContext();
    /**
     * <code>optional .RemoteTraceContext traceContext = 15;</code>
     */
    akka.remote.TraceContextAwareWireFormats.RemoteTraceContextOrBuilder getTraceContextOrBuilder();
  }
  /**
   * Protobuf type {@code TraceContextAwareRemoteEnvelope}
   */
  public static final class TraceContextAwareRemoteEnvelope extends
      akka.protobuf.GeneratedMessage
      implements TraceContextAwareRemoteEnvelopeOrBuilder {
    // Use TraceContextAwareRemoteEnvelope.newBuilder() to construct.
    private TraceContextAwareRemoteEnvelope(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TraceContextAwareRemoteEnvelope(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TraceContextAwareRemoteEnvelope defaultInstance;
    public static TraceContextAwareRemoteEnvelope getDefaultInstance() {
      return defaultInstance;
    }

    public TraceContextAwareRemoteEnvelope getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TraceContextAwareRemoteEnvelope(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              akka.remote.WireFormats.ActorRefData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = recipient_.toBuilder();
              }
              recipient_ = input.readMessage(akka.remote.WireFormats.ActorRefData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(recipient_);
                recipient_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              akka.remote.WireFormats.SerializedMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = message_.toBuilder();
              }
              message_ = input.readMessage(akka.remote.WireFormats.SerializedMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(message_);
                message_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 34: {
              akka.remote.WireFormats.ActorRefData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = sender_.toBuilder();
              }
              sender_ = input.readMessage(akka.remote.WireFormats.ActorRefData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sender_);
                sender_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 41: {
              bitField0_ |= 0x00000008;
              seq_ = input.readFixed64();
              break;
            }
            case 122: {
              akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = traceContext_.toBuilder();
              }
              traceContext_ = input.readMessage(akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(traceContext_);
                traceContext_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.remote.TraceContextAwareWireFormats.internal_static_TraceContextAwareRemoteEnvelope_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.remote.TraceContextAwareWireFormats.internal_static_TraceContextAwareRemoteEnvelope_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.class, akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.Builder.class);
    }

    public static akka.protobuf.Parser<TraceContextAwareRemoteEnvelope> PARSER =
        new akka.protobuf.AbstractParser<TraceContextAwareRemoteEnvelope>() {
      public TraceContextAwareRemoteEnvelope parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new TraceContextAwareRemoteEnvelope(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<TraceContextAwareRemoteEnvelope> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .ActorRefData recipient = 1;
    public static final int RECIPIENT_FIELD_NUMBER = 1;
    private akka.remote.WireFormats.ActorRefData recipient_;
    /**
     * <code>required .ActorRefData recipient = 1;</code>
     */
    public boolean hasRecipient() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ActorRefData recipient = 1;</code>
     */
    public akka.remote.WireFormats.ActorRefData getRecipient() {
      return recipient_;
    }
    /**
     * <code>required .ActorRefData recipient = 1;</code>
     */
    public akka.remote.WireFormats.ActorRefDataOrBuilder getRecipientOrBuilder() {
      return recipient_;
    }

    // required .SerializedMessage message = 2;
    public static final int MESSAGE_FIELD_NUMBER = 2;
    private akka.remote.WireFormats.SerializedMessage message_;
    /**
     * <code>required .SerializedMessage message = 2;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .SerializedMessage message = 2;</code>
     */
    public akka.remote.WireFormats.SerializedMessage getMessage() {
      return message_;
    }
    /**
     * <code>required .SerializedMessage message = 2;</code>
     */
    public akka.remote.WireFormats.SerializedMessageOrBuilder getMessageOrBuilder() {
      return message_;
    }

    // optional .ActorRefData sender = 4;
    public static final int SENDER_FIELD_NUMBER = 4;
    private akka.remote.WireFormats.ActorRefData sender_;
    /**
     * <code>optional .ActorRefData sender = 4;</code>
     */
    public boolean hasSender() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .ActorRefData sender = 4;</code>
     */
    public akka.remote.WireFormats.ActorRefData getSender() {
      return sender_;
    }
    /**
     * <code>optional .ActorRefData sender = 4;</code>
     */
    public akka.remote.WireFormats.ActorRefDataOrBuilder getSenderOrBuilder() {
      return sender_;
    }

    // optional fixed64 seq = 5;
    public static final int SEQ_FIELD_NUMBER = 5;
    private long seq_;
    /**
     * <code>optional fixed64 seq = 5;</code>
     */
    public boolean hasSeq() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional fixed64 seq = 5;</code>
     */
    public long getSeq() {
      return seq_;
    }

    // optional .RemoteTraceContext traceContext = 15;
    public static final int TRACECONTEXT_FIELD_NUMBER = 15;
    private akka.remote.TraceContextAwareWireFormats.RemoteTraceContext traceContext_;
    /**
     * <code>optional .RemoteTraceContext traceContext = 15;</code>
     */
    public boolean hasTraceContext() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .RemoteTraceContext traceContext = 15;</code>
     */
    public akka.remote.TraceContextAwareWireFormats.RemoteTraceContext getTraceContext() {
      return traceContext_;
    }
    /**
     * <code>optional .RemoteTraceContext traceContext = 15;</code>
     */
    public akka.remote.TraceContextAwareWireFormats.RemoteTraceContextOrBuilder getTraceContextOrBuilder() {
      return traceContext_;
    }

    private void initFields() {
      recipient_ = akka.remote.WireFormats.ActorRefData.getDefaultInstance();
      message_ = akka.remote.WireFormats.SerializedMessage.getDefaultInstance();
      sender_ = akka.remote.WireFormats.ActorRefData.getDefaultInstance();
      seq_ = 0L;
      traceContext_ = akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRecipient()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRecipient().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMessage().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasSender()) {
        if (!getSender().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTraceContext()) {
        if (!getTraceContext().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, recipient_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, message_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, sender_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFixed64(5, seq_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(15, traceContext_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(1, recipient_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(2, message_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(4, sender_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += akka.protobuf.CodedOutputStream
          .computeFixed64Size(5, seq_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += akka.protobuf.CodedOutputStream
          .computeMessageSize(15, traceContext_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TraceContextAwareRemoteEnvelope}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelopeOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_TraceContextAwareRemoteEnvelope_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_TraceContextAwareRemoteEnvelope_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.class, akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.Builder.class);
      }

      // Construct using akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRecipientFieldBuilder();
          getMessageFieldBuilder();
          getSenderFieldBuilder();
          getTraceContextFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (recipientBuilder_ == null) {
          recipient_ = akka.remote.WireFormats.ActorRefData.getDefaultInstance();
        } else {
          recipientBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (messageBuilder_ == null) {
          message_ = akka.remote.WireFormats.SerializedMessage.getDefaultInstance();
        } else {
          messageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (senderBuilder_ == null) {
          sender_ = akka.remote.WireFormats.ActorRefData.getDefaultInstance();
        } else {
          senderBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        seq_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (traceContextBuilder_ == null) {
          traceContext_ = akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.getDefaultInstance();
        } else {
          traceContextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_TraceContextAwareRemoteEnvelope_descriptor;
      }

      public akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope getDefaultInstanceForType() {
        return akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.getDefaultInstance();
      }

      public akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope build() {
        akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope buildPartial() {
        akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope result = new akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (recipientBuilder_ == null) {
          result.recipient_ = recipient_;
        } else {
          result.recipient_ = recipientBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (messageBuilder_ == null) {
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (senderBuilder_ == null) {
          result.sender_ = sender_;
        } else {
          result.sender_ = senderBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seq_ = seq_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (traceContextBuilder_ == null) {
          result.traceContext_ = traceContext_;
        } else {
          result.traceContext_ = traceContextBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope) {
          return mergeFrom((akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope other) {
        if (other == akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope.getDefaultInstance()) return this;
        if (other.hasRecipient()) {
          mergeRecipient(other.getRecipient());
        }
        if (other.hasMessage()) {
          mergeMessage(other.getMessage());
        }
        if (other.hasSender()) {
          mergeSender(other.getSender());
        }
        if (other.hasSeq()) {
          setSeq(other.getSeq());
        }
        if (other.hasTraceContext()) {
          mergeTraceContext(other.getTraceContext());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRecipient()) {
          
          return false;
        }
        if (!hasMessage()) {
          
          return false;
        }
        if (!getRecipient().isInitialized()) {
          
          return false;
        }
        if (!getMessage().isInitialized()) {
          
          return false;
        }
        if (hasSender()) {
          if (!getSender().isInitialized()) {
            
            return false;
          }
        }
        if (hasTraceContext()) {
          if (!getTraceContext().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.remote.TraceContextAwareWireFormats.TraceContextAwareRemoteEnvelope) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .ActorRefData recipient = 1;
      private akka.remote.WireFormats.ActorRefData recipient_ = akka.remote.WireFormats.ActorRefData.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.WireFormats.ActorRefData, akka.remote.WireFormats.ActorRefData.Builder, akka.remote.WireFormats.ActorRefDataOrBuilder> recipientBuilder_;
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      public boolean hasRecipient() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      public akka.remote.WireFormats.ActorRefData getRecipient() {
        if (recipientBuilder_ == null) {
          return recipient_;
        } else {
          return recipientBuilder_.getMessage();
        }
      }
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      public Builder setRecipient(akka.remote.WireFormats.ActorRefData value) {
        if (recipientBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          recipient_ = value;
          onChanged();
        } else {
          recipientBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      public Builder setRecipient(
          akka.remote.WireFormats.ActorRefData.Builder builderForValue) {
        if (recipientBuilder_ == null) {
          recipient_ = builderForValue.build();
          onChanged();
        } else {
          recipientBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      public Builder mergeRecipient(akka.remote.WireFormats.ActorRefData value) {
        if (recipientBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              recipient_ != akka.remote.WireFormats.ActorRefData.getDefaultInstance()) {
            recipient_ =
              akka.remote.WireFormats.ActorRefData.newBuilder(recipient_).mergeFrom(value).buildPartial();
          } else {
            recipient_ = value;
          }
          onChanged();
        } else {
          recipientBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      public Builder clearRecipient() {
        if (recipientBuilder_ == null) {
          recipient_ = akka.remote.WireFormats.ActorRefData.getDefaultInstance();
          onChanged();
        } else {
          recipientBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      public akka.remote.WireFormats.ActorRefData.Builder getRecipientBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRecipientFieldBuilder().getBuilder();
      }
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      public akka.remote.WireFormats.ActorRefDataOrBuilder getRecipientOrBuilder() {
        if (recipientBuilder_ != null) {
          return recipientBuilder_.getMessageOrBuilder();
        } else {
          return recipient_;
        }
      }
      /**
       * <code>required .ActorRefData recipient = 1;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.WireFormats.ActorRefData, akka.remote.WireFormats.ActorRefData.Builder, akka.remote.WireFormats.ActorRefDataOrBuilder> 
          getRecipientFieldBuilder() {
        if (recipientBuilder_ == null) {
          recipientBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.remote.WireFormats.ActorRefData, akka.remote.WireFormats.ActorRefData.Builder, akka.remote.WireFormats.ActorRefDataOrBuilder>(
                  recipient_,
                  getParentForChildren(),
                  isClean());
          recipient_ = null;
        }
        return recipientBuilder_;
      }

      // required .SerializedMessage message = 2;
      private akka.remote.WireFormats.SerializedMessage message_ = akka.remote.WireFormats.SerializedMessage.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.WireFormats.SerializedMessage, akka.remote.WireFormats.SerializedMessage.Builder, akka.remote.WireFormats.SerializedMessageOrBuilder> messageBuilder_;
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      public akka.remote.WireFormats.SerializedMessage getMessage() {
        if (messageBuilder_ == null) {
          return message_;
        } else {
          return messageBuilder_.getMessage();
        }
      }
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      public Builder setMessage(akka.remote.WireFormats.SerializedMessage value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          messageBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      public Builder setMessage(
          akka.remote.WireFormats.SerializedMessage.Builder builderForValue) {
        if (messageBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          messageBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      public Builder mergeMessage(akka.remote.WireFormats.SerializedMessage value) {
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              message_ != akka.remote.WireFormats.SerializedMessage.getDefaultInstance()) {
            message_ =
              akka.remote.WireFormats.SerializedMessage.newBuilder(message_).mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          messageBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = akka.remote.WireFormats.SerializedMessage.getDefaultInstance();
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      public akka.remote.WireFormats.SerializedMessage.Builder getMessageBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      public akka.remote.WireFormats.SerializedMessageOrBuilder getMessageOrBuilder() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilder();
        } else {
          return message_;
        }
      }
      /**
       * <code>required .SerializedMessage message = 2;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.WireFormats.SerializedMessage, akka.remote.WireFormats.SerializedMessage.Builder, akka.remote.WireFormats.SerializedMessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.remote.WireFormats.SerializedMessage, akka.remote.WireFormats.SerializedMessage.Builder, akka.remote.WireFormats.SerializedMessageOrBuilder>(
                  message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      // optional .ActorRefData sender = 4;
      private akka.remote.WireFormats.ActorRefData sender_ = akka.remote.WireFormats.ActorRefData.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.WireFormats.ActorRefData, akka.remote.WireFormats.ActorRefData.Builder, akka.remote.WireFormats.ActorRefDataOrBuilder> senderBuilder_;
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      public boolean hasSender() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      public akka.remote.WireFormats.ActorRefData getSender() {
        if (senderBuilder_ == null) {
          return sender_;
        } else {
          return senderBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      public Builder setSender(akka.remote.WireFormats.ActorRefData value) {
        if (senderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sender_ = value;
          onChanged();
        } else {
          senderBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      public Builder setSender(
          akka.remote.WireFormats.ActorRefData.Builder builderForValue) {
        if (senderBuilder_ == null) {
          sender_ = builderForValue.build();
          onChanged();
        } else {
          senderBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      public Builder mergeSender(akka.remote.WireFormats.ActorRefData value) {
        if (senderBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              sender_ != akka.remote.WireFormats.ActorRefData.getDefaultInstance()) {
            sender_ =
              akka.remote.WireFormats.ActorRefData.newBuilder(sender_).mergeFrom(value).buildPartial();
          } else {
            sender_ = value;
          }
          onChanged();
        } else {
          senderBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      public Builder clearSender() {
        if (senderBuilder_ == null) {
          sender_ = akka.remote.WireFormats.ActorRefData.getDefaultInstance();
          onChanged();
        } else {
          senderBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      public akka.remote.WireFormats.ActorRefData.Builder getSenderBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSenderFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      public akka.remote.WireFormats.ActorRefDataOrBuilder getSenderOrBuilder() {
        if (senderBuilder_ != null) {
          return senderBuilder_.getMessageOrBuilder();
        } else {
          return sender_;
        }
      }
      /**
       * <code>optional .ActorRefData sender = 4;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.WireFormats.ActorRefData, akka.remote.WireFormats.ActorRefData.Builder, akka.remote.WireFormats.ActorRefDataOrBuilder> 
          getSenderFieldBuilder() {
        if (senderBuilder_ == null) {
          senderBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.remote.WireFormats.ActorRefData, akka.remote.WireFormats.ActorRefData.Builder, akka.remote.WireFormats.ActorRefDataOrBuilder>(
                  sender_,
                  getParentForChildren(),
                  isClean());
          sender_ = null;
        }
        return senderBuilder_;
      }

      // optional fixed64 seq = 5;
      private long seq_ ;
      /**
       * <code>optional fixed64 seq = 5;</code>
       */
      public boolean hasSeq() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional fixed64 seq = 5;</code>
       */
      public long getSeq() {
        return seq_;
      }
      /**
       * <code>optional fixed64 seq = 5;</code>
       */
      public Builder setSeq(long value) {
        bitField0_ |= 0x00000008;
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 seq = 5;</code>
       */
      public Builder clearSeq() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seq_ = 0L;
        onChanged();
        return this;
      }

      // optional .RemoteTraceContext traceContext = 15;
      private akka.remote.TraceContextAwareWireFormats.RemoteTraceContext traceContext_ = akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.getDefaultInstance();
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.TraceContextAwareWireFormats.RemoteTraceContext, akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.Builder, akka.remote.TraceContextAwareWireFormats.RemoteTraceContextOrBuilder> traceContextBuilder_;
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      public boolean hasTraceContext() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      public akka.remote.TraceContextAwareWireFormats.RemoteTraceContext getTraceContext() {
        if (traceContextBuilder_ == null) {
          return traceContext_;
        } else {
          return traceContextBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      public Builder setTraceContext(akka.remote.TraceContextAwareWireFormats.RemoteTraceContext value) {
        if (traceContextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          traceContext_ = value;
          onChanged();
        } else {
          traceContextBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      public Builder setTraceContext(
          akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.Builder builderForValue) {
        if (traceContextBuilder_ == null) {
          traceContext_ = builderForValue.build();
          onChanged();
        } else {
          traceContextBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      public Builder mergeTraceContext(akka.remote.TraceContextAwareWireFormats.RemoteTraceContext value) {
        if (traceContextBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              traceContext_ != akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.getDefaultInstance()) {
            traceContext_ =
              akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.newBuilder(traceContext_).mergeFrom(value).buildPartial();
          } else {
            traceContext_ = value;
          }
          onChanged();
        } else {
          traceContextBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      public Builder clearTraceContext() {
        if (traceContextBuilder_ == null) {
          traceContext_ = akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.getDefaultInstance();
          onChanged();
        } else {
          traceContextBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      public akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.Builder getTraceContextBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getTraceContextFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      public akka.remote.TraceContextAwareWireFormats.RemoteTraceContextOrBuilder getTraceContextOrBuilder() {
        if (traceContextBuilder_ != null) {
          return traceContextBuilder_.getMessageOrBuilder();
        } else {
          return traceContext_;
        }
      }
      /**
       * <code>optional .RemoteTraceContext traceContext = 15;</code>
       */
      private akka.protobuf.SingleFieldBuilder<
          akka.remote.TraceContextAwareWireFormats.RemoteTraceContext, akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.Builder, akka.remote.TraceContextAwareWireFormats.RemoteTraceContextOrBuilder> 
          getTraceContextFieldBuilder() {
        if (traceContextBuilder_ == null) {
          traceContextBuilder_ = new akka.protobuf.SingleFieldBuilder<
              akka.remote.TraceContextAwareWireFormats.RemoteTraceContext, akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.Builder, akka.remote.TraceContextAwareWireFormats.RemoteTraceContextOrBuilder>(
                  traceContext_,
                  getParentForChildren(),
                  isClean());
          traceContext_ = null;
        }
        return traceContextBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:TraceContextAwareRemoteEnvelope)
    }

    static {
      defaultInstance = new TraceContextAwareRemoteEnvelope(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:TraceContextAwareRemoteEnvelope)
  }

  public interface RemoteTraceContextOrBuilder
      extends akka.protobuf.MessageOrBuilder {

    // required bytes context = 1;
    /**
     * <code>required bytes context = 1;</code>
     */
    boolean hasContext();
    /**
     * <code>required bytes context = 1;</code>
     */
    akka.protobuf.ByteString getContext();
  }
  /**
   * Protobuf type {@code RemoteTraceContext}
   */
  public static final class RemoteTraceContext extends
      akka.protobuf.GeneratedMessage
      implements RemoteTraceContextOrBuilder {
    // Use RemoteTraceContext.newBuilder() to construct.
    private RemoteTraceContext(akka.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RemoteTraceContext(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RemoteTraceContext defaultInstance;
    public static RemoteTraceContext getDefaultInstance() {
      return defaultInstance;
    }

    public RemoteTraceContext getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final akka.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RemoteTraceContext(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      akka.protobuf.UnknownFieldSet.Builder unknownFields =
          akka.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              context_ = input.readBytes();
              break;
            }
          }
        }
      } catch (akka.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new akka.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return akka.remote.TraceContextAwareWireFormats.internal_static_RemoteTraceContext_descriptor;
    }

    protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return akka.remote.TraceContextAwareWireFormats.internal_static_RemoteTraceContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.class, akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.Builder.class);
    }

    public static akka.protobuf.Parser<RemoteTraceContext> PARSER =
        new akka.protobuf.AbstractParser<RemoteTraceContext>() {
      public RemoteTraceContext parsePartialFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws akka.protobuf.InvalidProtocolBufferException {
        return new RemoteTraceContext(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public akka.protobuf.Parser<RemoteTraceContext> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes context = 1;
    public static final int CONTEXT_FIELD_NUMBER = 1;
    private akka.protobuf.ByteString context_;
    /**
     * <code>required bytes context = 1;</code>
     */
    public boolean hasContext() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes context = 1;</code>
     */
    public akka.protobuf.ByteString getContext() {
      return context_;
    }

    private void initFields() {
      context_ = akka.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasContext()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(akka.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, context_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += akka.protobuf.CodedOutputStream
          .computeBytesSize(1, context_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseFrom(
        akka.protobuf.ByteString data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseFrom(
        akka.protobuf.ByteString data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseFrom(byte[] data)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseFrom(
        byte[] data,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws akka.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseDelimitedFrom(
        java.io.InputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseFrom(
        akka.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parseFrom(
        akka.protobuf.CodedInputStream input,
        akka.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(akka.remote.TraceContextAwareWireFormats.RemoteTraceContext prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        akka.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RemoteTraceContext}
     */
    public static final class Builder extends
        akka.protobuf.GeneratedMessage.Builder<Builder>
       implements akka.remote.TraceContextAwareWireFormats.RemoteTraceContextOrBuilder {
      public static final akka.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_RemoteTraceContext_descriptor;
      }

      protected akka.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_RemoteTraceContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.class, akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.Builder.class);
      }

      // Construct using akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          akka.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        context_ = akka.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public akka.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return akka.remote.TraceContextAwareWireFormats.internal_static_RemoteTraceContext_descriptor;
      }

      public akka.remote.TraceContextAwareWireFormats.RemoteTraceContext getDefaultInstanceForType() {
        return akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.getDefaultInstance();
      }

      public akka.remote.TraceContextAwareWireFormats.RemoteTraceContext build() {
        akka.remote.TraceContextAwareWireFormats.RemoteTraceContext result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public akka.remote.TraceContextAwareWireFormats.RemoteTraceContext buildPartial() {
        akka.remote.TraceContextAwareWireFormats.RemoteTraceContext result = new akka.remote.TraceContextAwareWireFormats.RemoteTraceContext(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.context_ = context_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(akka.protobuf.Message other) {
        if (other instanceof akka.remote.TraceContextAwareWireFormats.RemoteTraceContext) {
          return mergeFrom((akka.remote.TraceContextAwareWireFormats.RemoteTraceContext)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(akka.remote.TraceContextAwareWireFormats.RemoteTraceContext other) {
        if (other == akka.remote.TraceContextAwareWireFormats.RemoteTraceContext.getDefaultInstance()) return this;
        if (other.hasContext()) {
          setContext(other.getContext());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasContext()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          akka.protobuf.CodedInputStream input,
          akka.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        akka.remote.TraceContextAwareWireFormats.RemoteTraceContext parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (akka.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (akka.remote.TraceContextAwareWireFormats.RemoteTraceContext) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes context = 1;
      private akka.protobuf.ByteString context_ = akka.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes context = 1;</code>
       */
      public boolean hasContext() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes context = 1;</code>
       */
      public akka.protobuf.ByteString getContext() {
        return context_;
      }
      /**
       * <code>required bytes context = 1;</code>
       */
      public Builder setContext(akka.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        context_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes context = 1;</code>
       */
      public Builder clearContext() {
        bitField0_ = (bitField0_ & ~0x00000001);
        context_ = getDefaultInstance().getContext();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RemoteTraceContext)
    }

    static {
      defaultInstance = new RemoteTraceContext(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RemoteTraceContext)
  }

  private static akka.protobuf.Descriptors.Descriptor
    internal_static_AckAndTraceContextAwareEnvelopeContainer_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AckAndTraceContextAwareEnvelopeContainer_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_TraceContextAwareRemoteEnvelope_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TraceContextAwareRemoteEnvelope_fieldAccessorTable;
  private static akka.protobuf.Descriptors.Descriptor
    internal_static_RemoteTraceContext_descriptor;
  private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_RemoteTraceContext_fieldAccessorTable;

  public static akka.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static akka.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"TraceContextAwareWireFormats.proto\032\026Co" +
      "ntainerFormats.proto\032\021WireFormats.proto\"" +
      "\201\001\n(AckAndTraceContextAwareEnvelopeConta" +
      "iner\022!\n\003ack\030\001 \001(\0132\024.AcknowledgementInfo\022" +
      "2\n\010envelope\030\002 \001(\0132 .TraceContextAwareRem" +
      "oteEnvelope\"\277\001\n\037TraceContextAwareRemoteE" +
      "nvelope\022 \n\trecipient\030\001 \002(\0132\r.ActorRefDat" +
      "a\022#\n\007message\030\002 \002(\0132\022.SerializedMessage\022\035" +
      "\n\006sender\030\004 \001(\0132\r.ActorRefData\022\013\n\003seq\030\005 \001" +
      "(\006\022)\n\014traceContext\030\017 \001(\0132\023.RemoteTraceCo",
      "ntext\"%\n\022RemoteTraceContext\022\017\n\007context\030\001" +
      " \002(\014B\017\n\013akka.remoteH\001"
    };
    akka.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new akka.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public akka.protobuf.ExtensionRegistry assignDescriptors(
            akka.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_AckAndTraceContextAwareEnvelopeContainer_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_AckAndTraceContextAwareEnvelopeContainer_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_AckAndTraceContextAwareEnvelopeContainer_descriptor,
              new java.lang.String[] { "Ack", "Envelope", });
          internal_static_TraceContextAwareRemoteEnvelope_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_TraceContextAwareRemoteEnvelope_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TraceContextAwareRemoteEnvelope_descriptor,
              new java.lang.String[] { "Recipient", "Message", "Sender", "Seq", "TraceContext", });
          internal_static_RemoteTraceContext_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_RemoteTraceContext_fieldAccessorTable = new
            akka.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_RemoteTraceContext_descriptor,
              new java.lang.String[] { "Context", });
          return null;
        }
      };
    akka.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new akka.protobuf.Descriptors.FileDescriptor[] {
          akka.remote.ContainerFormats.getDescriptor(),
          akka.remote.WireFormats.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
